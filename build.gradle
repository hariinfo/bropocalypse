apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'war'
apply plugin: 'tomcat'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.8'
  }
}

repositories {
    mavenCentral()
    maven {
      url 'https://github.com/s7/mvnrepo/raw/master'
      url 'http://repo.springsource.org/release'
      url 'http://repo.springsource.org/libs-release'
      url 'http://maven.springframework.org/milestone'
      url 'http://mvn.riptano.com/content/repositories/public'
    }
}

ext {
  springVersion = '3.2.2.RELEASE'
  tomcatVersion = '7.0.11'
  logbackVersion = '1.0.1'
}


configurations {
  restApi {extendsFrom compile, providedCompile}

}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5@jar'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
      exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    compile "org.springframework:spring-context:$springVersion",
//            "org.springframework:spring-jdbc:$springVersion",
            "org.springframework.security:spring-security-web:3.1.4.RELEASE",
            "org.apache.commons:commons-lang3:3.1",
            'org.apache.httpcomponents:httpclient:4.2',
            'org.apache.httpcomponents:httpcore:4.2',
            "me.prettyprint:hector-core:1.0-5",
            "org.aspectj:aspectjtools:1.6.2",
            "cglib:cglib:2.2",
            "com.thoughtworks.xstream:xstream:1.4.2",
            "xpp3:xpp3:1.1.3.4.O",
            "org.slf4j:slf4j-log4j12:1.6.1",
            'mysql:mysql-connector-java:5.1.6',
            "com.fasterxml.jackson.core:jackson-databind:2.1.3",
//            files('gradle/libs/ojdbc6.jar'),
            "org.springframework:spring-webmvc:$springVersion",
            "org.springframework.data:spring-data-mongodb:1.2.1.RELEASE",
            "ch.qos.logback:logback-core:$logbackVersion",
            "ch.qos.logback:logback-classic:$logbackVersion",
            "org.elasticsearch:elasticsearch:0.90.2"
        
        

    testCompile 'org.testng:testng:6.3.1',
                "org.springframework:spring-test:$springVersion"

  runtime "ch.qos.logback:logback-core:$logbackVersion",
          "ch.qos.logback:logback-classic:$logbackVersion"
  
    restApi files ('gradle/libs/versly-wsdoc-1.0-SNAPSHOT.jar'),
            'org.freemarker:freemarker:2.3.16',
            'joda-time:joda-time:1.6',
            'com.beust:jcommander:1.4',
            "org.codehaus.jackson:jackson-core-asl:1.6.3",
            'javax.ws.rs:jsr311-api:1.1.1'
  
}


test {
  useTestNG()
  options {
    includeGroups 'unit'
  }
  testReportDir = new File(testReportDir, "unitTest-report")
}

task intTest (type: Test)  {
  useTestNG()
  options {
    includeGroups 'int'
  }
  testReportDir = new File(testReportDir, "integrationTest-report")
}

task testPerformance (type: Test) {
  maxHeapSize = '1024m'
  useTestNG()
  options {
    includeGroups 'performance'
  }
}
// gradle wrapper version
task wrapper(type: Wrapper, description: 'Runs the gradle wrapper.') {
    gradleVersion = '1.6'
}

// we need to copy the libraries nicely into somewhere we can 
task copyRestApiLibs(type:Copy){
    from configurations.restApi {
      // we have multiple versions of asm, get rid of the old ones
      exclude '**/*asm-3.3.1.jar','**/*asm-tree-3.0.jar'
    }
    into 'build/libs/restApi'
  }

//task startElasticSearch (type:Exec) {
//
//  workingDir '/Applications/elasticsearch-0.90.2/bin'
//  commandLine "./elasticsearch -f"
//}

war {
     from ('build') {
       include 'docs/**'
     }  // adds docs file-set to the war.
}


task native2ascii << {
    ant.delete() {
        fileset(dir: "${processResources.destinationDir}") {
            include(name: 'messages*.properties')
        }
    }
    ant.native2ascii(src: 'src/main/resources/',
            dest: "${processResources.destinationDir}",
            includes: '**/messages*.properties',
            encoding: 'UTF-8')
}

// we're doing this via a script because I cannot get javac working with either Ant or Gradle to implement the annotation processor.  A custom 
// Gradle task would make that much easier...
// using exec tasks so we can differentiate between Windows and unix, and stream the outputs
task createRestApiSer ( dependsOn: classes)<< {
  if(isWindows()){
//    new ByteArrayOutputStream().withStream { output ->
//          exec {
//            executable = "createApiSer.cmd"
//            standardOutput = output
//          }
//          println output.toString()
//    }
    // don't do anything for Windows until we figure out the DOS script.
  }else {
    new ByteArrayOutputStream().withStream { output ->
      exec {
        executable = "./createApiSer.sh"
        standardOutput = output
      }
      println output.toString()
    }
  }
}

// make sure that the javadocs will be generated before war is run and ensure that we convert the resource bundles as appropriate
war.dependsOn javadoc, native2ascii
// Make javadoc depend on the Spring doclet stuff
createRestApiSer.dependsOn copyRestApiLibs
javadoc.dependsOn createRestApiSer


public boolean isWindows()
{
  return System.properties['os.name'].toLowerCase().contains('windows')
}

// uses the system os.name property to determine the current host operating system
public boolean isMac()
{
  return System.properties['os.name'].toLowerCase().contains('mac')
}